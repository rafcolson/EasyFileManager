<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Abort" xml:space="preserve">
    <value>Abort</value>
  </data>
  <data name="AboutMessage" xml:space="preserve">
    <value>Information on licensing and using Easy File Manager can be viewed at https://github.com/rafcolson/EasyFileManager. Issues can be reported on https://github.com/rafcolson/EasyFileManager/issues. Releases can be downloaded at https://github.com/rafcolson/EasyFileManager/releases.</value>
  </data>
  <data name="Address" xml:space="preserve">
    <value>Address</value>
  </data>
  <data name="Application" xml:space="preserve">
    <value>Application</value>
  </data>
  <data name="Apply" xml:space="preserve">
    <value>Apply</value>
  </data>
  <data name="AreaInfo" xml:space="preserve">
    <value>Area info</value>
  </data>
  <data name="AreaInfoFromEasyMetadata" xml:space="preserve">
    <value>Area info from Easy metadata</value>
  </data>
  <data name="Audio" xml:space="preserve">
    <value>Audio</value>
  </data>
  <data name="BackupFolderCopy" xml:space="preserve">
    <value>Backup (copy)</value>
  </data>
  <data name="BackupFolderDefault" xml:space="preserve">
    <value>Backup</value>
  </data>
  <data name="BackupFolderDoesNotExist" xml:space="preserve">
    <value>Backup folder does not exist. No changes made.</value>
  </data>
  <data name="BackupFolderMove" xml:space="preserve">
    <value>Backup (move)</value>
  </data>
  <data name="CameraManufacturer" xml:space="preserve">
    <value>Camera manufacturer</value>
  </data>
  <data name="CameraModel" xml:space="preserve">
    <value>Camera model</value>
  </data>
  <data name="Comment" xml:space="preserve">
    <value>Comment</value>
  </data>
  <data name="Compressed" xml:space="preserve">
    <value>Compressed</value>
  </data>
  <data name="Contacts" xml:space="preserve">
    <value>Contacts</value>
  </data>
  <data name="Contains" xml:space="preserve">
    <value>Contains</value>
  </data>
  <data name="Contents" xml:space="preserve">
    <value>Content</value>
  </data>
  <data name="Coordinates" xml:space="preserve">
    <value>Coordinates</value>
  </data>
  <data name="Custom" xml:space="preserve">
    <value>Custom</value>
  </data>
  <data name="CustomDict" xml:space="preserve">
    <value>Custom dictionary</value>
  </data>
  <data name="CustomMetadata" xml:space="preserve">
    <value>Custom metadata</value>
  </data>
  <data name="DateCreated" xml:space="preserve">
    <value>Date created</value>
  </data>
  <data name="DateCustomize" xml:space="preserve">
    <value>Date (custom)</value>
  </data>
  <data name="DateDefault" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="DateEarliest" xml:space="preserve">
    <value>Date earliest</value>
  </data>
  <data name="DateEncoded" xml:space="preserve">
    <value>Date encoded</value>
  </data>
  <data name="DateFromEasyMetadata" xml:space="preserve">
    <value>Date from Easy metadata</value>
  </data>
  <data name="DateFromFolderName" xml:space="preserve">
    <value>Date from parent folder name</value>
  </data>
  <data name="DateMetadata" xml:space="preserve">
    <value>Date (metadata)</value>
  </data>
  <data name="DateModified" xml:space="preserve">
    <value>Date modified</value>
  </data>
  <data name="DateTaken" xml:space="preserve">
    <value>Date taken</value>
  </data>
  <data name="DateTakenOrEncoded" xml:space="preserve">
    <value>Date taken or encoded</value>
  </data>
  <data name="DayCreated" xml:space="preserve">
    <value>Day created</value>
  </data>
  <data name="DayEarliest" xml:space="preserve">
    <value>Day earliest</value>
  </data>
  <data name="DayFromEasyMetadata" xml:space="preserve">
    <value>Day from Easy metadata</value>
  </data>
  <data name="DayTakenOrEncoded" xml:space="preserve">
    <value>Day taken or encoded</value>
  </data>
  <data name="DeleteAllDuplicates" xml:space="preserve">
    <value>All duplicates will be deleted permanently. Continue?</value>
  </data>
  <data name="DeleteDuplicates" xml:space="preserve">
    <value>Duplicates of '{0}' will be deleted permanently. Continue?</value>
  </data>
  <data name="DeleteEasyMetadata" xml:space="preserve">
    <value>Easy metadata will be deleted. Continue?</value>
  </data>
  <data name="DeleteEmptyFolders" xml:space="preserve">
    <value>Delete empty folders</value>
  </data>
  <data name="Document" xml:space="preserve">
    <value>Document</value>
  </data>
  <data name="DuplicatesDefault" xml:space="preserve">
    <value>Duplicates</value>
  </data>
  <data name="DuplicatesDelete" xml:space="preserve">
    <value>Duplicates (delete)</value>
  </data>
  <data name="DuplicatesFolderDoesNotExist" xml:space="preserve">
    <value>Duplicates destination folder does not exist. No changes made.</value>
  </data>
  <data name="DuplicatesMove" xml:space="preserve">
    <value>Duplicates (move)</value>
  </data>
  <data name="EasyMetadata" xml:space="preserve">
    <value>Easy metadata</value>
  </data>
  <data name="EasyShellOrVideoMetadata" xml:space="preserve">
    <value>Easy, Shell or video metadata</value>
  </data>
  <data name="EditComparisonProfile" xml:space="preserve">
    <value>Edit comparison profile</value>
  </data>
  <data name="EditEasyMetadata" xml:space="preserve">
    <value>Edit Easy metadata</value>
  </data>
  <data name="EditFilter" xml:space="preserve">
    <value>Edit filter</value>
  </data>
  <data name="EditGPS" xml:space="preserve">
    <value>Edit GPS</value>
  </data>
  <data name="EditKeywords" xml:space="preserve">
    <value>Edit keywords</value>
  </data>
  <data name="EditSubfolders" xml:space="preserve">
    <value>Edit subfolders</value>
  </data>
  <data name="EndsWith" xml:space="preserve">
    <value>Ends with</value>
  </data>
  <data name="Explore" xml:space="preserve">
    <value>Explore...</value>
  </data>
  <data name="ExtraLargeThumbnail" xml:space="preserve">
    <value>Extra large thumbnail</value>
  </data>
  <data name="File" xml:space="preserve">
    <value>File</value>
  </data>
  <data name="FileExtension" xml:space="preserve">
    <value>File extension</value>
  </data>
  <data name="Files" xml:space="preserve">
    <value>Files</value>
  </data>
  <data name="FileType" xml:space="preserve">
    <value>File type</value>
  </data>
  <data name="FileTypeText" xml:space="preserve">
    <value>File type text</value>
  </data>
  <data name="Folder" xml:space="preserve">
    <value>Folder</value>
  </data>
  <data name="Folders" xml:space="preserve">
    <value>Folders</value>
  </data>
  <data name="FormatAlreadyExists" xml:space="preserve">
    <value>'{0}' already exists.</value>
  </data>
  <data name="GameMedia" xml:space="preserve">
    <value>Game media</value>
  </data>
  <data name="Geocoords" xml:space="preserve">
    <value>Coordinates</value>
  </data>
  <data name="Image" xml:space="preserve">
    <value>Image</value>
  </data>
  <data name="Invalid" xml:space="preserve">
    <value>Invalid</value>
  </data>
  <data name="KeywordsAdd" xml:space="preserve">
    <value>Keywords (add)</value>
  </data>
  <data name="KeywordsDefault" xml:space="preserve">
    <value>Keywords</value>
  </data>
  <data name="KeywordsReplace" xml:space="preserve">
    <value>Keywords (replace)</value>
  </data>
  <data name="LargeThumbnail" xml:space="preserve">
    <value>Large thumbnail</value>
  </data>
  <data name="MediumThumbnail" xml:space="preserve">
    <value>Medium thumbnail</value>
  </data>
  <data name="MessageCheckDialogText" xml:space="preserve">
    <value>Don't ask again.</value>
  </data>
  <data name="MonthCreated" xml:space="preserve">
    <value>Month created</value>
  </data>
  <data name="MonthEarliest" xml:space="preserve">
    <value>Month earliest</value>
  </data>
  <data name="MonthFromEasyMetadata" xml:space="preserve">
    <value>Month from Easy metadata</value>
  </data>
  <data name="MonthTakenOrEncoded" xml:space="preserve">
    <value>Month taken or encoded</value>
  </data>
  <data name="Name" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="NextFolder" xml:space="preserve">
    <value>Next folder</value>
  </data>
  <data name="OneLevelUp" xml:space="preserve">
    <value>One level up</value>
  </data>
  <data name="Open" xml:space="preserve">
    <value>Open...</value>
  </data>
  <data name="OverwriteEasyMetadata" xml:space="preserve">
    <value>Easy metadata will be overwritten. Continue?</value>
  </data>
  <data name="PreviousFolder" xml:space="preserve">
    <value>Previous folder</value>
  </data>
  <data name="RawName" xml:space="preserve">
    <value>Raw name</value>
  </data>
  <data name="ReplaceNormal" xml:space="preserve">
    <value>Replace</value>
  </data>
  <data name="ReplaceRegex" xml:space="preserve">
    <value>Replace (regex)</value>
  </data>
  <data name="SelectBackupFolder" xml:space="preserve">
    <value>Select backup folder</value>
  </data>
  <data name="SelectDuplicatesFolder" xml:space="preserve">
    <value>Select duplicates destination folder</value>
  </data>
  <data name="SelectFolder" xml:space="preserve">
    <value>Select folder</value>
  </data>
  <data name="SelectTopFolder" xml:space="preserve">
    <value>Select top folder</value>
  </data>
  <data name="ShellProperties" xml:space="preserve">
    <value>Shell properties</value>
  </data>
  <data name="ShowComparisonDialog" xml:space="preserve">
    <value>Show comparison dialog</value>
  </data>
  <data name="ShutingDown" xml:space="preserve">
    <value>Shutting down system...</value>
  </data>
  <data name="Size" xml:space="preserve">
    <value>Size</value>
  </data>
  <data name="SmallThumbnail" xml:space="preserve">
    <value>Small thumbnail</value>
  </data>
  <data name="StartsWith" xml:space="preserve">
    <value>Starts with</value>
  </data>
  <data name="StoreAllDuplicates" xml:space="preserve">
    <value>All duplicates will be stored in destination folder. Continue?</value>
  </data>
  <data name="StoreDuplicates" xml:space="preserve">
    <value>Duplicates of '{0}' will be stored in destination folder. Continue?</value>
  </data>
  <data name="Subject" xml:space="preserve">
    <value>Subject</value>
  </data>
  <data name="SymbolicLink" xml:space="preserve">
    <value>Symbolic link</value>
  </data>
  <data name="System" xml:space="preserve">
    <value>System</value>
  </data>
  <data name="Text" xml:space="preserve">
    <value>Text</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="TopFolderDoesNotExist" xml:space="preserve">
    <value>Top folder does not exist. No changes made.</value>
  </data>
  <data name="Type" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="Unknown" xml:space="preserve">
    <value>Unknown</value>
  </data>
  <data name="Unspecified" xml:space="preserve">
    <value>Unspecified</value>
  </data>
  <data name="Video" xml:space="preserve">
    <value>Video</value>
  </data>
  <data name="VideoMetadata" xml:space="preserve">
    <value>Video metadata</value>
  </data>
  <data name="WriteDateCreated" xml:space="preserve">
    <value>Write date created</value>
  </data>
  <data name="WriteDateEasyMetadata" xml:space="preserve">
    <value>Write date Easy metadata</value>
  </data>
  <data name="WriteDateModified" xml:space="preserve">
    <value>Write date modified</value>
  </data>
  <data name="WriteDateTakenOrEncoded" xml:space="preserve">
    <value>Write date taken or encoded</value>
  </data>
  <data name="WriteEasyMetadata" xml:space="preserve">
    <value>Store video metadata as Easy metadata?</value>
  </data>
  <data name="WriteGPSAreaInfo" xml:space="preserve">
    <value>Write GPS area information</value>
  </data>
  <data name="WriteGPSCoords" xml:space="preserve">
    <value>Write GPS coordinates</value>
  </data>
  <data name="WriteGPSEasyMetadata" xml:space="preserve">
    <value>Write GPS Easy metadata</value>
  </data>
  <data name="YearCreated" xml:space="preserve">
    <value>Year created</value>
  </data>
  <data name="YearEarliest" xml:space="preserve">
    <value>Year earliest</value>
  </data>
  <data name="YearFromEasyMetadata" xml:space="preserve">
    <value>Year from Easy metadata</value>
  </data>
  <data name="YearTakenOrEncoded" xml:space="preserve">
    <value>Year taken or encoded</value>
  </data>
</root>